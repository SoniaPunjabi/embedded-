
bin\Debug\fullproj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  000002d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003d1  00000000  00000000  00000327  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bf  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000372  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010a  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cb  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include <avr/io.h>
#include<util/delay.h>
void InitADC()
{
    ADMUX=(1<<REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24

ADCSRA=(1<<ADEN)|(1<<ADPS0);
  86:	81 e8       	ldi	r24, 0x81	; 129
  88:	80 93 7a 00 	sts	0x007A, r24
}
  8c:	08 95       	ret

0000008e <ReadADC>:
uint16_t ReadADC (uint8_t ch)
{

//Select ADC Channel ch must be

ADMUX&=0xf8;
  8e:	90 91 7c 00 	lds	r25, 0x007C
  92:	98 7f       	andi	r25, 0xF8	; 248
  94:	90 93 7c 00 	sts	0x007C, r25

ch=ch&0b00000111;

ADMUX|=ch;
  98:	90 91 7c 00 	lds	r25, 0x007C
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	89 2b       	or	r24, r25
  a0:	80 93 7c 00 	sts	0x007C, r24

//Start Single conversion

ADCSRA|=(1<<ADSC);
  a4:	80 91 7a 00 	lds	r24, 0x007A
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 93 7a 00 	sts	0x007A, r24

//Wait for conversion to complete

while (!(ADCSRA&(1<<ADIF)));
  ae:	80 91 7a 00 	lds	r24, 0x007A
  b2:	84 ff       	sbrs	r24, 4
  b4:	fc cf       	rjmp	.-8      	; 0xae <ReadADC+0x20>

//Clear ADIF.by writing one to it

ADCSRA|=(1<<ADIF);
  b6:	80 91 7a 00 	lds	r24, 0x007A
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 93 7a 00 	sts	0x007A, r24

return (ADC);}
  c0:	20 91 78 00 	lds	r18, 0x0078
  c4:	30 91 79 00 	lds	r19, 0x0079
  c8:	c9 01       	movw	r24, r18
  ca:	08 95       	ret

000000cc <main>:


int main(void)
{InitADC();
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
#include <avr/io.h>
#include<util/delay.h>
void InitADC()
{
    ADMUX=(1<<REFS0);
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	80 93 7c 00 	sts	0x007C, r24

ADCSRA=(1<<ADEN)|(1<<ADPS0);
  da:	81 e8       	ldi	r24, 0x81	; 129
  dc:	80 93 7a 00 	sts	0x007A, r24


int main(void)
{InitADC();
uint16_t temp;
    DDRB|=(1<<PB0); //B0=1
  e0:	20 9a       	sbi	0x04, 0	; 4
    DDRD&=~(1<<PD0);
  e2:	50 98       	cbi	0x0a, 0	; 10
    PORTD|=(1<<PD0);
  e4:	58 9a       	sbi	0x0b, 0	; 11
    DDRD&=~(1<<PD1);
  e6:	51 98       	cbi	0x0a, 1	; 10
    PORTD|=(1<<PD1);
  e8:	59 9a       	sbi	0x0b, 1	; 11
     TCCR1A|=(1<<COM1A1)|(1<<WGM11)|(1<<WGM10);
  ea:	80 91 80 00 	lds	r24, 0x0080
  ee:	83 68       	ori	r24, 0x83	; 131
  f0:	80 93 80 00 	sts	0x0080, r24
     TCCR1B|=(1<<WGM12)|(1<<CS11)|(1<<CS10);// 64 prescalar
  f4:	80 91 81 00 	lds	r24, 0x0081
  f8:	8b 60       	ori	r24, 0x0B	; 11
  fa:	80 93 81 00 	sts	0x0081, r24

DDRB|=(1<<PB1);
  fe:	21 9a       	sbi	0x04, 1	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	40 e9       	ldi	r20, 0x90	; 144
 102:	51 e0       	ldi	r21, 0x01	; 1
if(temp>=510&&temp<=700)
{OCR1A=716.8;

_delay_ms (200);}
if(temp>=710&&temp<=1024)
{OCR1A = 972.8;
 104:	ec ec       	ldi	r30, 0xCC	; 204
 106:	f3 e0       	ldi	r31, 0x03	; 3
if(temp>=210&&temp<=500)
{OCR1A = 409.6;

_delay_ms (200);}
if(temp>=510&&temp<=700)
{OCR1A=716.8;
 108:	ac ec       	ldi	r26, 0xCC	; 204
 10a:	b2 e0       	ldi	r27, 0x02	; 2
{OCR1A = 204.8;

_delay_ms (200);}

if(temp>=210&&temp<=500)
{OCR1A = 409.6;
 10c:	c9 e9       	ldi	r28, 0x99	; 153
 10e:	d1 e0       	ldi	r29, 0x01	; 1
    PORTB|=(1<<PB0);
    _delay_ms(20);
    temp=ReadADC(0);
      _delay_ms(200);
    if(temp>=0&&temp<=200)
{OCR1A = 204.8;
 110:	0c ec       	ldi	r16, 0xCC	; 204
 112:	10 e0       	ldi	r17, 0x00	; 0


    while(1)
    {

    if(!(PIND&(1<<PD0))&&!(PIND&(1<<PD1)))// pressing switch
 114:	48 99       	sbic	0x09, 0	; 9
 116:	86 c0       	rjmp	.+268    	; 0x224 <main+0x158>
 118:	49 99       	sbic	0x09, 1	; 9
 11a:	84 c0       	rjmp	.+264    	; 0x224 <main+0x158>

{
    PORTB|=(1<<PB0);
 11c:	28 9a       	sbi	0x05, 0	; 5
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	ca 01       	movw	r24, r20
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x58>
 128:	2f 5f       	subi	r18, 0xFF	; 255
 12a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	28 3c       	cpi	r18, 0xC8	; 200
 12e:	31 05       	cpc	r19, r1
 130:	c1 f7       	brne	.-16     	; 0x122 <main+0x56>
uint16_t ReadADC (uint8_t ch)
{

//Select ADC Channel ch must be

ADMUX&=0xf8;
 132:	80 91 7c 00 	lds	r24, 0x007C
 136:	88 7f       	andi	r24, 0xF8	; 248
 138:	80 93 7c 00 	sts	0x007C, r24

ch=ch&0b00000111;

ADMUX|=ch;
 13c:	80 91 7c 00 	lds	r24, 0x007C
 140:	80 93 7c 00 	sts	0x007C, r24

//Start Single conversion

ADCSRA|=(1<<ADSC);
 144:	80 91 7a 00 	lds	r24, 0x007A
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 93 7a 00 	sts	0x007A, r24

//Wait for conversion to complete

while (!(ADCSRA&(1<<ADIF)));
 14e:	80 91 7a 00 	lds	r24, 0x007A
 152:	84 ff       	sbrs	r24, 4
 154:	fc cf       	rjmp	.-8      	; 0x14e <main+0x82>

//Clear ADIF.by writing one to it

ADCSRA|=(1<<ADIF);
 156:	80 91 7a 00 	lds	r24, 0x007A
 15a:	80 61       	ori	r24, 0x10	; 16
 15c:	80 93 7a 00 	sts	0x007A, r24

return (ADC);}
 160:	60 91 78 00 	lds	r22, 0x0078
 164:	70 91 79 00 	lds	r23, 0x0079
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	ca 01       	movw	r24, r20
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xa2>
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	20 3d       	cpi	r18, 0xD0	; 208
 17a:	38 07       	cpc	r19, r24
 17c:	b9 f7       	brne	.-18     	; 0x16c <main+0xa0>
{
    PORTB|=(1<<PB0);
    _delay_ms(20);
    temp=ReadADC(0);
      _delay_ms(200);
    if(temp>=0&&temp<=200)
 17e:	69 3c       	cpi	r22, 0xC9	; 201
 180:	71 05       	cpc	r23, r1
 182:	78 f4       	brcc	.+30     	; 0x1a2 <main+0xd6>
{OCR1A = 204.8;
 184:	10 93 89 00 	sts	0x0089, r17
 188:	00 93 88 00 	sts	0x0088, r16
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	ca 01       	movw	r24, r20
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xc6>
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	3f 4f       	sbci	r19, 0xFF	; 255
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	20 3d       	cpi	r18, 0xD0	; 208
 19e:	38 07       	cpc	r19, r24
 1a0:	b9 f7       	brne	.-18     	; 0x190 <main+0xc4>

_delay_ms (200);}

if(temp>=210&&temp<=500)
 1a2:	cb 01       	movw	r24, r22
 1a4:	82 5d       	subi	r24, 0xD2	; 210
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	83 52       	subi	r24, 0x23	; 35
 1aa:	91 40       	sbci	r25, 0x01	; 1
 1ac:	78 f4       	brcc	.+30     	; 0x1cc <main+0x100>
{OCR1A = 409.6;
 1ae:	d0 93 89 00 	sts	0x0089, r29
 1b2:	c0 93 88 00 	sts	0x0088, r28
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	ca 01       	movw	r24, r20
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0xf0>
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	3f 4f       	sbci	r19, 0xFF	; 255
 1c4:	87 e0       	ldi	r24, 0x07	; 7
 1c6:	20 3d       	cpi	r18, 0xD0	; 208
 1c8:	38 07       	cpc	r19, r24
 1ca:	b9 f7       	brne	.-18     	; 0x1ba <main+0xee>

_delay_ms (200);}
if(temp>=510&&temp<=700)
 1cc:	cb 01       	movw	r24, r22
 1ce:	8e 5f       	subi	r24, 0xFE	; 254
 1d0:	91 40       	sbci	r25, 0x01	; 1
 1d2:	8f 3b       	cpi	r24, 0xBF	; 191
 1d4:	91 05       	cpc	r25, r1
 1d6:	78 f4       	brcc	.+30     	; 0x1f6 <main+0x12a>
{OCR1A=716.8;
 1d8:	b0 93 89 00 	sts	0x0089, r27
 1dc:	a0 93 88 00 	sts	0x0088, r26
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	ca 01       	movw	r24, r20
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <main+0x11a>
 1ea:	2f 5f       	subi	r18, 0xFF	; 255
 1ec:	3f 4f       	sbci	r19, 0xFF	; 255
 1ee:	87 e0       	ldi	r24, 0x07	; 7
 1f0:	20 3d       	cpi	r18, 0xD0	; 208
 1f2:	38 07       	cpc	r19, r24
 1f4:	b9 f7       	brne	.-18     	; 0x1e4 <main+0x118>

_delay_ms (200);}
if(temp>=710&&temp<=1024)
 1f6:	66 5c       	subi	r22, 0xC6	; 198
 1f8:	72 40       	sbci	r23, 0x02	; 2
 1fa:	6b 53       	subi	r22, 0x3B	; 59
 1fc:	71 40       	sbci	r23, 0x01	; 1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <main+0x136>
 200:	89 cf       	rjmp	.-238    	; 0x114 <main+0x48>
{OCR1A = 972.8;
 202:	f0 93 89 00 	sts	0x0089, r31
 206:	e0 93 88 00 	sts	0x0088, r30
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	ca 01       	movw	r24, r20
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <main+0x144>
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	20 3d       	cpi	r18, 0xD0	; 208
 21c:	38 07       	cpc	r19, r24
 21e:	b9 f7       	brne	.-18     	; 0x20e <main+0x142>


    while(1)
    {

    if(!(PIND&(1<<PD0))&&!(PIND&(1<<PD1)))// pressing switch
 220:	48 9b       	sbis	0x09, 0	; 9
 222:	7a cf       	rjmp	.-268    	; 0x118 <main+0x4c>
_delay_ms (200);}


    }
    else
    {PORTB&=~(1<<PB0);
 224:	28 98       	cbi	0x05, 0	; 5
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	ca 01       	movw	r24, r20
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x160>
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	28 3c       	cpi	r18, 0xC8	; 200
 236:	31 05       	cpc	r19, r1
 238:	c1 f7       	brne	.-16     	; 0x22a <main+0x15e>
 23a:	6c cf       	rjmp	.-296    	; 0x114 <main+0x48>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
